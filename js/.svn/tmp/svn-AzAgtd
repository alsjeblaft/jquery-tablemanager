/*
 * jQuery tablemanager plugin
 *
 * Version: 0.1
 * Author : Mathias Vonende, le-tex publishing services GmbH
 * Date :   05-01-2012
 * 
 * A Plugin to toggle the visibility of rows and columns in a 
 * HTML-Table. 
 * 
 */


(function($){
    
	var cssclasses = {
	collapsible    : "tablemanager-collapsible",
	noncollapsible : "tablemanager-non-collapsible",
	row_collapse : "tablemanager-row",
	img_widget   : "tablemanager-selector-widget",
	col_collapse : "",
	col_extended : "",
	row_collapse : "",
	row_extended : "",
	};
    
	$.fn.tablemanager = function(method, args){
		method_dispatcher(method, args);
	};	
    
    function method_dispatcher(method, args){
	if (methods[method]) {
	    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
	}
	else if(typeof method === 'object' || ! method ){
	    return methods.init.apply(this, arguments);
	}
	else {
	    $.error( 'Method: ' +  method + ' does not exist on jQuery.tablemanager');
	}
    };
    
    var methods = {
	init : function(table){
	    /*
	     * $.fn.tablemanager()
	     * 
	     * the init-method. 
	     * 
	     * all th-elements in a thead with the css-class collapsible, 
	     * get their onclick-events overridden, with the function: 
	     * $.fn.tablemanager('toggle_col');
	     * 
	     * all th-elements in a tbody with the css-class collapsible, 
	     * get their onclick-events overridden, with the function:
	     * $.fn.tablemanager('toggle_row');
	     */
	    
	    console.log("initialize tablemanager");
	    
	    table.each(function(){
		init_cellspace($(this));
		render_head_list($(this));
	    });
	    
	    table.find("th." + cssclasses.collapsible).each(function(){
		$(this).prepend('<img class="' + cssclasses.img_widget + '" src="img/expanded.png" />')
	    });
	    
	    table.find("thead th." + cssclasses.collapsible + " img." + cssclasses.img_widget).click(function(){
		$.fn.tablemanager('toggle_col', $(this).parent("td,th"));
	    });
	    
	    table.find("tbody th." + cssclasses.collapsible + " img." + cssclasses.img_widget).click(function(){
		$.fn.tablemanager('toggle_row', $(this).parent("th,td"));
	    });
	    return this;
	},
	toggle_col : function(cell){
	    /*
	     * $.fn.tablemanager('toggle_col')
	     * 
	     * a method to toggle a single col and all additional rows
	     * inherited by the cells' colspans
	     */
	    
	    var colspan = cell.attr("colspan");
	    
	    var tablebody = cell.parents("table").find("tbody");
	    var tablehead = cell.parents("table").find("thead");
	    
	    var rowindex = cell.parent().parent().children().index(cell.parent());
	    
	    var index = get_accumulated_colspan(cell);
	    
	    tablehead.find("tr th").each(function(){
		$this = $(this);
		if($this.data("rowspace") == rowindex){
		    if($this.data("colspace") >= index && 
		       $this.data("colspace") < index + colspan){
			if(!$this.hasClass("col-nonvisible")){
			    hide_cell($this);
			    $this.parent().nextAll("tr").find("th").each(function(){
				$this = $(this);
				if($this.data("colspace") >= index && 
				   $this.data("colspace") < index + colspan){
				    hide_cell($this);
				    $this.children("img." + cssclasses.img_widget).css("visibility", "hidden");
				    if ($this.data("applied_li") != undefined){
					hide_li($this.data("applied_li"));
					$this.data("applied_li").children("img").css("visibility", "hidden");
				    }
				}
			    });
			    hide_col(tablebody, index, colspan);
			}
			else{
			    show_cell($this);
			    $this.parent().nextAll("tr").find("th").each(function(){
				$this = $(this);
				if($this.data("colspace") >= index && 
				   $this.data("colspace") < index + colspan){
				    show_cell($this);
				    $this.children("img." + cssclasses.img_widget).css("visibility", "visible");
				    if ($this.data("applied_li") != undefined){
					show_li($this.data("applied_li"));
					$this.data("applied_li").children("img").css("visibility", "visible");
				    }
				}
			    });
			    show_col(tablebody, index, colspan);
			}
		    }
		}
	    });
	    
	    toggle_li(cell.data("applied_li"));
	    
	    return this;
	},
	toggle_row : function(cell){
	    /*
	     * $.fn.tablemanager('toggle_row')
	     * 
	     * a method to toggle a row and all additional rows 
	     * or inherited by the cell-rows' rowspans
	     */
	    var context_row = cell.parent();
	    
	    var rowindex = context_row.parent().children().index(context_row);
	    
	    context_class = context_row.next().children("th").attr("class");
	    
	    if(context_class!=undefined){
		if(context_class.indexOf(cssclasses.collapsible) == -1){
		    tabmanager_toggle_row(context_row);
		    do{
			context_row = context_row.next();
			context_class = context_row.next().children("th").attr("class");
			tabmanager_toggle_row_inherited(context_row);
		    }while(context_class != undefined && context_class.indexOf(cssclasses.collapsible) == -1);
		}
		else{
		    tabmanager_toggle_row(context_row);
		}
	    }
	    else{
		tabmanager_toggle_row(context_row);
	    }
	    return this;
	},
    };
    
    function order_to_json_vert(json_head, json_temp, colnum){
	for (elem in json_head){
	    if(json_temp.colspace >= json_head[elem].colspace && 
	       json_temp.colspace < json_head[elem].colspace + json_head[elem].colspan){
		if(json_temp.rowspace == json_head[elem].rowspace + 1){
		    json_head[elem].list[colnum] = json_temp;
		}
		else{
		    order_to_json_vert({colnum:json_head[elem].list[colnum - 1]}, json_temp, colnum);
		}
	    }
	}
    }
    
    function tablehead_to_json(thead){
	var json_head = {};
	var json_temp = {};
	
	var colnum = 0;
	
	thead.find("tr").each(function(){
	    colnum = 0;
	    context_row = $(this);
	    context_row.children("th."+ cssclasses.collapsible).each(function(){
		context_col = $(this);
		
		var json_temp = {};
		json_temp.applied_cell = context_col;
		json_temp.rowspace = context_col.data("rowspace");
		json_temp.colspace = context_col.data("colspace");
		json_temp.colspan  = context_col.attr("colspan");
		json_temp.list     = {};
		
		if(context_col.data("rowspace") == 0){
		    json_head[colnum] = json_temp;
		}
		else{
		    order_to_json_vert(json_head, json_temp, colnum);
		}
		
		colnum = colnum + 1;
	    });
	});
	return json_head;
    }
    
    function get_json_length(json_object){
	var ctr = 0;
	for(obj in json_object)
	    ctr ++;
	return ctr;
    }
    function html_list_from_json(json_list, tabid, mode, nesting_level){
	var ul;
	if(mode === "cols"){
	    ul = $('<ul class="tablemanager-cols-list"></ul>');
	}
	else if(mode === "rows"){
	    ul = $('<ul class="tablemanager-rows-list"></ul>');
	}
	else {
	    $.error('html_list_from_json: no mode defined');
	    return;
	}
	
	for (elem in json_list){
	    var li = $('<li class="visible">' + json_list[elem].applied_cell.get(0).innerHTML + "</li>");
	    
	    li.prepend('<img style="display:inline; padding: 5px; list-style:none;" src="img/expanded.png" />');
	    
	    li.children("p, span").each(function(){
		$(this).css("display","inline");
	    });
	    
	    li.data("colspace", json_list[elem].colspace);
	    li.data("rowspace", json_list[elem].rowspace);
	    
	    var applied_cell = json_list[elem].applied_cell;
	    
	    applied_cell.data("applied_li", li);
	    li.children("img").data("applied_cell", applied_cell);
	    
	    if(mode === "cols"){
		li.children("img").click(function(){
		    $.fn.tablemanager('toggle_col', $(this).data().applied_cell);
		});
	    }
	    else if(mode === "rows"){
		li.children("img").click(function(){
		    $.fn.tablemanager('toggle_row', $(this).data().applied_cell);
		});
	    }
	    
	    if (get_json_length(json_list[elem].list) > 0){
		nested_list = html_list_from_json(json_list[elem].list, tabid, mode, nesting_level + 1);
		li.append(nested_list);
	    }
	    ul.append(li);
	}
	
	return ul;
    }
    
    function render_head_list(table){
	var json_head = tablehead_to_json(table.find("thead"));
	var html_list = html_list_from_json(json_head, table.attr("id"), "cols", 0);
	table.parent("div").prepend(html_list);
    }
    
    function mapreduce(array, fctn_map, fctn_reduce, init_reduce){
	maparray = $.map(array, fctn_map);
	return maparray.reduce(fctn_reduce, init_reduce);
    }
        
    function get_accumulated_colspan(cell){
			function map(cell){return $(cell).attr("colspan")}; 
			function reduce(a, b){return a + b};
			
			colarray = $.makeArray(cell.prevAll("th, td"));
			
			return mapreduce(colarray, map, reduce, 0);
    }
    
		function arrpos(x, y, w) {
			return y * w + x;
		}

		function set_coords(cell, x, y) {
			if (cell.data('colspace') == undefined) {
				cell.data('colspace', x);
				cell.data('rowspace', y);
			}
		}

		// initialize physical grid, FORTRAN style (jQuery is for pussies):
    function init_cellspace(table){
      
      var rows = table.find("tr");
      
      var cr = []; // cellref
      var mr = []; // morerows (= rowspan - 1)
      var w = 0;
      var cells = $(rows[0]).children("*");

      // first row:
      var j = 0;
      for (var k = 0; k < cells.length; k++) {
        var cell = $(cells[k]);
        var cs = cell.attr('colspan');
        var rs1 = cell.attr('rowspan') - 1;
        for(var i = j; i < j + cs; i++) {
          cr[i] = cell;
          mr[i] = rs1;
          set_coords(cell, i, 0);
          w++;
        }
        j = j + cs;

        cell.click(function(){
                     console.log($(this).data("colspace") + ',' + $(this).data("rowspace"));    
                   });
      }

      for (var y = 1; y < rows.length; y++) {
        var cellcounter = 0;
        for(var j = 0; j < w; j++) {
          if (mr[arrpos(j, y - 1, w)] > 0) {
            var ap = arrpos(j, y, w);
            var ap1 = arrpos(j, y - 1, w);
            cr[ap] = cr[ap1];
            mr[ap] = Math.max(0, mr[ap1] - 1);
          } else {
            var cell = $(rows[y]).children("*:nth-child(" + (cellcounter + 1) + ")");
            var cs = cell.attr('colspan');
            var rs1 = cell.attr('rowspan') - 1;
            for(var i = j; i < j + cs; i++) {
              var ap = arrpos(i, y, w);
              cr[ap] = cell;
              mr[ap] = rs1;
              set_coords(cell, i, y);
            }
            j = j + cs - 1; // - 1 here because it will be incremented after the loop anyway
            cellcounter++;

            cell.click(function(){
                         console.log($(this).data("colspace") + ',' + $(this).data("rowspace"));    
                       });

          }
        }
      }
    }

    function init_cellspace_old(table){
			var count_tr = 0;
			var count_td = 0;
	
			function map(cell){return $(cell).attr("rowspan")}; 
			function reduce(a, b){return Math.max(a, b)};
	
			console.log("init cellspace: " + table.attr("id"));
	
			var spanarray = null;
	
			var rowarray = null;
			var maxrowspan = null;
	    
			table.find("tr").each(function(){
        context_row = $(this);
				count_td = 0;
	    
				rowarray = $.makeArray(context_row.children("th, td"));
				maxrowspan = mapreduce(rowarray, map, reduce, 0);
	    
				cells = context_row.children("th, td");

				spanarray = $.map(rowarray, function(cell){
														return $(cell).attr("rowspan");
													});
	    
	    cells.each(function(){
		/*
		var context_cell = $(this);
		var cellnum;
		var column_num = $(this).attr("rowspan");
		var parent_tr  = $(this).closest("tr");
		var parent_trs = $(this).closest("tr").parent().find("tr");
		
		parent_tr.find(">td, >th").each(function(i, o){
		    if($(this) == context_cell){
			cellnum = i;
			var counter = $(this).attr("rowspan");
			
			while(counter--){
			    $(this).closest("tr").next().find("td, th").each(function(i, o){
				if(cellnum == i){
				    context_cell.data("colspace", column_num);
				}
			    });
			}
		    }
		});
		
		$(this).data("rowspace", count_tr);
		count_td = count_td + column_num;
		*/
		
		$(this).data("colspace", count_td);
		$(this).data("rowspace", count_tr);		
		curr_colspan = $(this).attr("colspan");
		count_td = count_td + $(this).attr("colspan");
	    });
	    
	    cells.click(function(){
		console.log($(this).data("colspace"));
	    });
	    
	    count_tr = count_tr + maxrowspan;
	});
    }

    
    function toggle_li(listitem){
	if (listitem.hasClass("visible")){
	    hide_li(listitem);
	    //listitem.removeClass("visible").addClass("nonvisible");
	    //listitem.children("img").attr("src", "img/collapsed.png");
	    //listitem.children("p, span").css("color","#ccc");

	}
	else{
	    show_li(listitem);
	    //listitem.removeClass("nonvisible").addClass("visible");
	    //listitem.children("img").attr("src", "img/expanded.png");
	    //listitem.children("p, span").css("color","#000");
	}
    }
    
    function show_li(listitem){
	listitem.removeClass("nonvisible").addClass("visible");
	listitem.children("img").attr("src", "img/expanded.png");
	listitem.children("p, span").css("color","#000");
    }
    
    function hide_li(listitem){
	listitem.removeClass("visible").addClass("nonvisible");
	listitem.children("img").attr("src", "img/collapsed.png");
	listitem.children("p, span").css("color","#ccc");
    }
    
    
    function hide_row(row){
	row.children("th").children("p").addClass("nonvisible").removeClass("visible");
	row.children("td").each(function(){
	    $(this).addClass("nonvisible").removeClass("visible").removeClass("col-visible");
	    $(this).children("p").css("display","none");
	});
    }
    
    function show_row(row){
	row.children("th").children("p").addClass("visible").removeClass("nonvisible")
	row.children("td").each(function(){
	    if(!$(this).hasClass("col-nonvisible")){
		$(this).addClass("visible").removeClass("nonvisible").removeClass("col-nonvisible");
	    }
	    $(this).children("p").css("display","inline");
	});
    }

    function hide_col(tbody, index, colspan){
	tbody.find("td").each(function(){
	    if($(this).data("colspace") >= index && 
	       $(this).data("colspace") < index + colspan){
		hide_cell($(this));
	    } 
	});
    };

    function show_col(tbody, index, colspan){
	tbody.find("td").each(function(){
	    if($(this).data("colspace") >= index && $(this).data("colspace") < index + colspan){
		show_cell($(this));
	    } 
	});
    }
    
    function hide_cell(col){
	if(col.is("th")){
	    col.find("img." + cssclasses.img_widget).attr("src", "img/collapsed.png");
	}	
	col.addClass("col-nonvisible").removeClass("col-visible").removeClass("visible");
	col.children("p").addClass("nonvisible").removeClass("visible");
    }
    
    function show_cell(col){
	if(col.is("th")){
	    col.find("img." + cssclasses.img_widget).attr("src", "img/expanded.png");
	}
	col.addClass("col-visible").removeClass("col-nonvisible").removeClass("nonvisible");
	col.children("p").addClass("visible").removeClass("nonvisible");
    }
    
    function tabmanager_toggle_row(row){
	if(row.hasClass("tablemanager-collapsed")){
	    row.removeClass("tablemanager-collapsed").addClass("tablemanager-expanded");
	    row.find("th img[class='tablemanager-selector-widget']").attr("src", "img/expanded.png");
	    show_row(row);
	}
	else if(row.hasClass("tablemanager-expanded")){
	    row.removeClass("tablemanager-expanded").addClass("tablemanager-collapsed");
	    row.find("th img[class='tablemanager-selector-widget']").attr("src", "img/collapsed.png");
	    hide_row(row);
	}
	else if (!row.hasClass("tablemanager-expanded") &&
		 !row.hasClass("tablemanager-collapsed")){
	    row.addClass("tablemanager-collapsed");
	    row.find("th img[class='tablemanager-selector-widget']").attr("src", "img/collapsed.png");
	    hide_row(row);
	}
    };
    function tabmanager_toggle_row_inherited(row){
	if(row.hasClass("tablemanager-inherit-collapsed")){
	    row.removeClass("tablemanager-inherit-collapsed").addClass("tablemanager-inherit-expanded");
	    show_row(row);
	}
	else if(row.hasClass("tablemanager-inherit-expanded")){
	    row.removeClass("tablemanager-inherit-expanded").addClass("tablemanager-inherit-collapsed");
	    hide_row(row);
	}
	else if (!row.hasClass("tablemanager-inherit-expanded") &&
		 !row.hasClass("tablemanager-inherit-collapsed")){
	    row.addClass("tablemanager-inherit-collapsed");
	    hide_row(row);
	}
    };
})(jQuery);
